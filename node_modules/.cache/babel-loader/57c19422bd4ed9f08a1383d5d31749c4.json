{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\alexa\\\\Desktop\\\\React Project\\\\e-commerce\\\\dev-projet-alex\\\\e-com\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\alexa\\\\Desktop\\\\React Project\\\\e-commerce\\\\dev-projet-alex\\\\e-com\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\alexa\\\\Desktop\\\\React Project\\\\e-commerce\\\\dev-projet-alex\\\\e-com\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from \"react-redux\";\nimport CustomButton from '../custom-button/custom-button.component';\nimport FormInput from '../form-input/form-input.component';\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nconst SignIn = (emailSignInStart, googleSignInStart) => {\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  const email = userCredentials.email,\n        password = userCredentials.password;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    onEmailSignInStart(email, password);\n  };\n\n  const handleChange = e => {\n    const _e$target = e.target,\n          value = _e$target.value,\n          name = _e$target.name;\n    setCredentials(_objectSpread({}, userCredentials, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(SignInContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(SignInTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \" I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \" Sign in with your email and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    handleChange: handleChange,\n    value: email,\n    label: \"Email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    handleChange: handleChange,\n    label: \"Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(ButtonsBarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \" Sign In \"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"  Google\"))));\n};\n\nconst mapDipatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDipatchToProps)(SignIn);","map":{"version":3,"sources":["C:/Users/alexa/Desktop/React Project/e-commerce/dev-projet-alex/e-com/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","CustomButton","FormInput","SignInContainer","SignInTitle","ButtonsBarContainer","googleSignInStart","emailSignInStart","SignIn","email","password","userCredentials","setCredentials","handleSubmit","e","preventDefault","onEmailSignInStart","handleChange","target","value","name","mapDipatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AAGA,SAAQC,eAAR,EAAyBC,WAAzB,EAAsCC,mBAAtC,QAAgE,kBAAhE;AACA,SAAQC,iBAAR,EAA2BC,gBAA3B,QAAkD,+BAAlD;;AAEA,MAAMC,MAAM,GAAE,CAACD,gBAAD,EAAkBD,iBAAlB,KAAwC;AAAA,oBACPP,QAAQ,CAAE;AAACU,IAAAA,KAAK,EAAC,EAAP;AAAWC,IAAAA,QAAQ,EAAC;AAApB,GAAF,CADD;AAAA;AAAA,QAC3CC,eAD2C;AAAA,QAC1BC,cAD0B;;AAAA,QAE3CH,KAF2C,GAExBE,eAFwB,CAE3CF,KAF2C;AAAA,QAEpCC,QAFoC,GAExBC,eAFwB,CAEpCD,QAFoC;;AAMtD,QAAMG,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AAEAC,IAAAA,kBAAkB,CAACP,KAAD,EAAQC,QAAR,CAAlB;AACH,GAJD;;AAMA,QAAMO,YAAY,GAAGH,CAAC,IAAI;AAAA,sBACAA,CAAC,CAACI,MADF;AAAA,UACfC,KADe,aACfA,KADe;AAAA,UACRC,IADQ,aACRA,IADQ;AAGtBR,IAAAA,cAAc,mBAAKD,eAAL;AAAqB,OAACS,IAAD,GAAOD;AAA5B,OAAd;AACH,GAJD;;AAMA,SACC,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAFJ,EAII;AAAM,IAAA,QAAQ,EAAEN,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEW,oBAAC,SAAD;AACA,IAAA,IAAI,EAAC,OADL;AAEA,IAAA,IAAI,EAAC,OAFL;AAGA,IAAA,YAAY,EAAEI,YAHd;AAIA,IAAA,KAAK,EAAER,KAJP;AAKA,IAAA,KAAK,EAAC,OALN;AAKc,IAAA,QAAQ,MALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFX,EAUW,oBAAC,SAAD;AACA,IAAA,IAAI,EAAC,UADL;AAEA,IAAA,IAAI,EAAC,UAFL;AAGA,IAAA,KAAK,EAAEC,QAHP;AAIA,IAAA,YAAY,EAAEO,YAJd;AAKA,IAAA,KAAK,EAAC,UALN;AAMA,IAAA,QAAQ,MANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVX,EAkBE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACS,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADT,EAES,oBAAC,YAAD;AACA,IAAA,IAAI,EAAC,QADL;AAEA,IAAA,OAAO,EAAEX,iBAFT;AAGA,IAAA,cAAc,MAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFT,CAlBF,CAJJ,CADD;AAmCC,CArDD;;AAuDA,MAAMe,iBAAiB,GAAGC,QAAQ,KAAK;AACnChB,EAAAA,iBAAiB,EAAE,MAAMgB,QAAQ,CAAChB,iBAAiB,EAAlB,CADE;AAEnCC,EAAAA,gBAAgB,EAAC,CAACE,KAAD,EAAQC,QAAR,KAAqBY,QAAQ,CAAEf,gBAAgB,CAAC;AAACE,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAD,CAAlB;AAFX,CAAL,CAAlC;;AAKA,eAAeV,OAAO,CAClB,IADkB,EAElBqB,iBAFkB,CAAP,CAGXb,MAHW,CAAf","sourcesContent":["import React, {useState} from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CustomButton from '../custom-button/custom-button.component'\r\nimport FormInput from '../form-input/form-input.component'\r\n\r\n\r\nimport {SignInContainer, SignInTitle, ButtonsBarContainer} from './sign-in.styles'\r\nimport {googleSignInStart, emailSignInStart} from '../../redux/user/user.actions'\r\n\r\nconst SignIn =(emailSignInStart,googleSignInStart) => {\r\n    const [userCredentials, setCredentials ] = useState ({email:'', password:'' })\r\n    const {email, password} = userCredentials\r\n\r\n\r\n\r\nconst handleSubmit = async e => {\r\n    e.preventDefault();\r\n   \r\n    onEmailSignInStart(email, password)\r\n}\r\n\r\nconst handleChange = e => {\r\n    const {value, name} = e.target\r\n\r\n    setCredentials({...userCredentials,[name]:value })\r\n}\r\n\r\nreturn (\r\n <SignInContainer>\r\n     <SignInTitle> I already have an account</SignInTitle>\r\n     <span> Sign in with your email and password</span>\r\n                \r\n     <form onSubmit={handleSubmit}>\r\n\r\n                <FormInput \r\n                name=\"email\" \r\n                type=\"email\" \r\n                handleChange={handleChange} \r\n                value={email} \r\n                label=\"Email\" required />\r\n              \r\n\r\n                <FormInput \r\n                name=\"password\" \r\n                type=\"password\" \r\n                value={password}\r\n                handleChange={handleChange} \r\n                label=\"Password\" \r\n                required />\r\n               \r\n       <ButtonsBarContainer>\r\n                <CustomButton type=\"submit\" > Sign In </CustomButton>\r\n                <CustomButton \r\n                type='button'\r\n                onClick={googleSignInStart} \r\n                isGoogleSignIn>  Google</CustomButton>\r\n       </ButtonsBarContainer>\r\n \r\n    </form>\r\n </SignInContainer>\r\n   )\r\n\r\n}\r\n\r\nconst mapDipatchToProps = dispatch => ({    \r\n    googleSignInStart: () => dispatch(googleSignInStart()),\r\n    emailSignInStart:(email, password) => dispatch (emailSignInStart({email,password}))\r\n})\r\n\r\nexport default connect(\r\n    null,\r\n    mapDipatchToProps\r\n  )(SignIn);"]},"metadata":{},"sourceType":"module"}