{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\alexa\\\\Desktop\\\\React Project\\\\e-commerce\\\\dev-projet-alex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyD_r-TaLVyyDrsieEDs1YwVHEbj87BgI8c\",\n  authDomain: \"e-commerce-7e0d9.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-7e0d9.firebaseio.com\",\n  projectId: \"e-commerce-7e0d9\",\n  storageBucket: \"e-commerce-7e0d9.appspot.com\",\n  messagingSenderId: \"247557599208\",\n  appId: \"1:247557599208:web:b2a854b0ce5f943d7fbe5d\",\n  measurementId: \"G-RCD67VLPGE\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\n  const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n    const _docSnapshot$data = docSnapshot.data(),\n          title = _docSnapshot$data.title,\n          items = _docSnapshot$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapshot.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/alexa/Desktop/React Project/e-commerce/dev-projet-alex/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collectionsSnapshot","transformedCollection","docs","map","docSnapshot","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,MAAMC,MAAM,GAAG;AACPC,EAAAA,MAAM,EAAE,yCADD;AAEPC,EAAAA,UAAU,EAAE,kCAFL;AAGPC,EAAAA,WAAW,EAAE,yCAHN;AAIPC,EAAAA,SAAS,EAAE,kBAJJ;AAKPC,EAAAA,aAAa,EAAE,8BALR;AAMPC,EAAAA,iBAAiB,EAAE,cANZ;AAOPC,EAAAA,KAAK,EAAE,2CAPA;AAQPC,EAAAA,aAAa,EAAE;AARR,CAAf;AAWGT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAAA,UACZC,WADY,GACWT,QADX,CACZS,WADY;AAAA,UACCC,KADD,GACWV,QADX,CACCU,KADD;AAEpB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDV,cAJC,EAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAvBM;AA0BP,OAAO,MAAMgB,yBAAyB,GAAE,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;AAC7E,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACzB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYU,SAAZ;AACAH,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAqBD,GAArB;AACF,GAJD;AAKA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACD,CAVM;AAYP,OAAO,MAAMC,+BAA+B,GAAGC,mBAAmB,IAAI;AACpE,QAAMC,qBAAqB,GAAGD,mBAAmB,CAACE,IAApB,CAAyBC,GAAzB,CAA6BC,WAAW,IAAI;AAAA,8BACjDA,WAAW,CAACC,IAAZ,EADiD;AAAA,UACjEC,KADiE,qBACjEA,KADiE;AAAA,UAC1DC,KAD0D,qBAC1DA,KAD0D;;AAGxE,WAAO;AACLC,MAAAA,SAAS,EAAEC,SAAS,CAACH,KAAK,CAACI,WAAN,EAAD,CADf;AAELC,MAAAA,EAAE,EACFP,WAAW,CAACO,EAHP;AAILL,MAAAA,KAJK;AAKLC,MAAAA;AALK,KAAP;AAOD,GAV6B,CAA9B;AAWA,SAAON,qBAAqB,CAACW,MAAtB,CAA6B,CAACC,WAAD,EAAcpB,UAAd,KAA6B;AAChEoB,IAAAA,WAAW,CAACpB,UAAU,CAACa,KAAX,CAAiBI,WAAjB,EAAD,CAAX,GAA8CjB,UAA9C;AACA,WAAOoB,WAAP;AACD,GAHO,EAGL,EAHK,CAAP;AAIA,CAhBK;AAmBP,OAAO,MAAMC,IAAI,GAAGvD,QAAQ,CAACuD,IAAT,EAAb;AACP,OAAO,MAAMxC,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,OAAO,MAAMyC,cAAc,GAAG,IAAIxD,QAAQ,CAACuD,IAAT,CAAcE,kBAAlB,EAAvB;AACPD,cAAc,CAACE,mBAAf,CAAmC;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnC;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,cAArB,CAA/B;AAEP,eAAexD,QAAf","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n\r\nconst config = {\r\n        apiKey: \"AIzaSyD_r-TaLVyyDrsieEDs1YwVHEbj87BgI8c\",\r\n        authDomain: \"e-commerce-7e0d9.firebaseapp.com\",\r\n        databaseURL: \"https://e-commerce-7e0d9.firebaseio.com\",\r\n        projectId: \"e-commerce-7e0d9\",\r\n        storageBucket: \"e-commerce-7e0d9.appspot.com\",\r\n        messagingSenderId: \"247557599208\",\r\n        appId: \"1:247557599208:web:b2a854b0ce5f943d7fbe5d\",\r\n        measurementId: \"G-RCD67VLPGE\"\r\n      };\r\n\r\n   firebase.initializeApp(config);\r\n\r\n   export const createUserProfileDocument = async (userAuth, additionalData) => {\r\n     if (!userAuth) return;\r\n   \r\n     const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n   \r\n     const snapShot = await userRef.get();\r\n   \r\n     if (!snapShot.exists) {\r\n       const { displayName, email } = userAuth;\r\n       const createdAt = new Date();\r\n       try {\r\n         await userRef.set({\r\n           displayName,\r\n           email,\r\n           createdAt,\r\n           ...additionalData\r\n         });\r\n       } catch (error) {\r\n         console.log('error creating user', error.message);\r\n       }\r\n     }\r\n   \r\n     return userRef;\r\n   };\r\n\r\n\r\n   export const addCollectionAndDocuments= async (collectionKey, objectsToAdd) => {\r\n     const collectionRef = firestore.collection(collectionKey)\r\n    \r\n     const batch = firestore.batch()\r\n     objectsToAdd.forEach(obj => {\r\n        const newDocRef = collectionRef.doc()\r\n        console.log(newDocRef)\r\n        batch.set(newDocRef, obj)\r\n     })\r\n     return await batch.commit();\r\n   }\r\n\r\n   export const convertCollectionsSnapshotToMap = collectionsSnapshot => {\r\n     const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\r\n       const {title, items} = docSnapshot.data()\r\n\r\n       return {\r\n         routeName: encodeURI(title.toLowerCase()),\r\n         id:\r\n         docSnapshot.id,\r\n         title,\r\n         items\r\n       }\r\n     })\r\n     return transformedCollection.reduce((accumulator, collection) => {\r\n      accumulator[collection.title.toLowerCase()] = collection;\r\n      return accumulator\r\n    }, {})\r\n    }\r\n\r\n\r\n   export const auth = firebase.auth();\r\n   export const firestore = firebase.firestore();\r\n   \r\n   export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n   googleProvider.setCustomParameters({ prompt: 'select_account' });\r\n   export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n   \r\n   export default firebase;"]},"metadata":{},"sourceType":"module"}